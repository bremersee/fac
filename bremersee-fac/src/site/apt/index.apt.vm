Bremersee Failed Access Counter

  This project contains a small protection against brute-force-attacks.

  A failed access counter stores failed access entries of a resource for a
  remote host, that wants to access the resource. The resource may be, for
  example, the login page. When the login has failed, this may be stored in the
  failed access counter. When the counter of the failed access entry has
  reached a threshold the login can be blocked for a while.
  
  The failed access counter needs a DAO (interface FailedAccessDao) to persist
  the failed access entries. Currently there are four DAO implementations
  available:
  
  * FailedAccessInMemoryDao: Persists the entries in memory.
  
  * FailedAccessJpaDao: Persists the entries in a SQL database.

  * FailedAccessLdapDao: Persists the entries in a LDAP server.

  * FailedAccessMongoDao: Persists the entries in a MongoDB.


* Configuration (in a Spring environment)

  To configure a failed access counter just create a bean, set the DAO
  and the properties that match your requirements:
  
+-----------------------------------------------------------------------+
@Configuration
public class FacConfig {

    @Bean
    public FailedAccessCounter failedAccessCounter() {
        FailedAccessCounterImpl fac = new FailedAccessCounterImpl();
        
        // set the properties (these are the default values):
        fac.setFailedAccessCounterThreshold(5);
        fac.setRemoveFailedAccessEntriesAfterMillis(1000L * 60L * 60L * 23L);
        fac.setRemoveFailedEntriesInterval(1000L * 60L * 60L);
        
        // set the DAO:
        fac.setFailedAccessDao(failedAccessDao());
        return fac;
    }
    
    @Bean
    public FailedAccessDao failedAccessDao() {
        FailedAccessInMemoryDao dao = new FailedAccessInMemoryDao();
        return dao;
    }
}
+-----------------------------------------------------------------------+
